/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package student.view;

import adminstrator.model.Employee;
import adminstrator.view.HomeForm;
import adminstrator.view.LoginAdminForm;
import book.Controller.DataFuctionImplement;
import book.Model.Book;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import student.controller.DataStudentFuctionImp;
import student.model.InValidEmailException;
import student.model.InValidPhoneException;
import student.model.Student;

/**
 *
 * @author DAI THE
 */
public class StudentForm extends javax.swing.JFrame {

    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    private ArrayList<Student> listStudent;
    private int stt;
    public int edit;
    private DataStudentFuctionImp dataImplement;
    private DefaultTableModel tableModel;
    private Employee emp;

    /**
     * Creates new form StudentForm
     */
    public StudentForm() {
        initComponents();
        setLocationRelativeTo(null);
        edit = -1;
        dataImplement = new DataStudentFuctionImp();
        addGroup();
        listStudent = new ArrayList<>();
        tableModel = (DefaultTableModel) tbStudent.getModel();
        dataImplement.readStudentSQL(listStudent);
        stt = listStudent.size() + 1;
        setID();
        showListStudent();
    }

    public StudentForm(Employee e) {
        this();
        emp = e;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSearchST = new javax.swing.ButtonGroup();
        buttonGroupGender = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbStudent = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnSeachByNameStudent = new javax.swing.JRadioButton();
        btnSeachByStudentId = new javax.swing.JRadioButton();
        btnSeachByClass = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LabelBookId = new javax.swing.JLabel();
        LabeBookName = new javax.swing.JLabel();
        LabelCategory = new javax.swing.JLabel();
        labelAuthor = new javax.swing.JLabel();
        LabelProducer = new javax.swing.JLabel();
        LabelPrice = new javax.swing.JLabel();
        LabelCount = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        comboboxCategory = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtSdt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDob = new javax.swing.JTextField();
        rbtnBoy = new javax.swing.JRadioButton();
        rbtnGirl = new javax.swing.JRadioButton();
        comboboxClass = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tbStudent.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tbStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã SV", "Tên SV", "Giới tính", "Ngày sinh", "Lớp", "Địa chỉ", "Chuyên ngành", "SĐT", "Email", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbStudent);
        if (tbStudent.getColumnModel().getColumnCount() > 0) {
            tbStudent.getColumnModel().getColumn(0).setMaxWidth(40);
            tbStudent.getColumnModel().getColumn(3).setMaxWidth(60);
            tbStudent.getColumnModel().getColumn(5).setMaxWidth(60);
            tbStudent.getColumnModel().getColumn(10).setMinWidth(62);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm Kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        btnSeachByNameStudent.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSeachByNameStudent.setText("Tìm Kiếm Theo Tên Sinh Viên");
        btnSeachByNameStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeachByNameStudentActionPerformed(evt);
            }
        });

        btnSeachByStudentId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSeachByStudentId.setText("Tìm Kiếm Theo Mã Sinh Viên");

        btnSeachByClass.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSeachByClass.setText("Tìm Kiếm Theo Lớp");

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/seach.png"))); // NOI18N
        btnSearch.setText("Tìm Kiếm");
        btnSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSeachByClass)
                    .addComponent(btnSeachByStudentId)
                    .addComponent(btnSeachByNameStudent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(44, 44, 44))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnSeachByNameStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSeachByStudentId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSeachByClass)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức Năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/add-user (1).png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/edit.png"))); // NOI18N
        btnUpdate.setText("Sửa");
        btnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/delete-user.png"))); // NOI18N
        btnRemove.setText("Xóa");
        btnRemove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/turn.png"))); // NOI18N
        btnRefresh.setText("Làm Mới");
        btnRefresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove)
                    .addComponent(btnRefresh))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông Tin Sinh Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        LabelBookId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabelBookId.setText("Mã SV");

        LabeBookName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabeBookName.setText("Tên SV");

        LabelCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabelCategory.setText("Chuyên ngành");

        labelAuthor.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        labelAuthor.setText("Giới tính");

        LabelProducer.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabelProducer.setText("Địa chỉ");

        LabelPrice.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabelPrice.setText("Lớp");

        LabelCount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        LabelCount.setText("Email");

        txtStudentId.setEditable(false);
        txtStudentId.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtAddress.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        comboboxCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        comboboxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Công Nghệ Thông Tin", "An Toàn Thông Tin", "Điện Tử Viễn Thông" }));
        comboboxCategory.setSelectedIndex(-1);
        comboboxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxCategoryActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Số ĐT");

        txtEmail.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtSdt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Ngày sinh");

        txtDob.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        rbtnBoy.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbtnBoy.setText("Nam");

        rbtnGirl.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbtnGirl.setText("Nữ");

        comboboxClass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboboxClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AT17A", "AT17B", "AT17C", "CT5A", "CT5B", "CT5C", "DT4A", "DT4B" }));
        comboboxClass.setSelectedIndex(-1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(LabelBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabeBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                            .addComponent(comboboxCategory, 0, 393, Short.MAX_VALUE)
                            .addComponent(txtDob)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(rbtnBoy)
                                .addGap(41, 41, 41)
                                .addComponent(rbtnGirl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2))
                .addGap(68, 68, 68)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LabelCount, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(LabelProducer, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(LabelPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addComponent(txtEmail)
                    .addComponent(txtSdt)
                    .addComponent(comboboxClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelBookId)
                    .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelProducer)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabeBookName)
                    .addComponent(LabelPrice)
                    .addComponent(comboboxClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCategory)
                    .addComponent(comboboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelCount)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelAuthor)
                        .addComponent(rbtnBoy)
                        .addComponent(rbtnGirl))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/setting (1).png"))); // NOI18N
        jMenu1.setText("Hệ Thống");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/undo.png"))); // NOI18N
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/shutdown.png"))); // NOI18N
        jMenuItem2.setText("Đăng Xuất");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("Thông Tin Sinh Viên");
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean validateForm() {
        return !txtStudentId.getText().isEmpty() && !txtName.getText().isEmpty()
                && !check_gender() && !txtDob.getText().isEmpty()
                && !txtAddress.getText().isEmpty() && comboboxCategory.getSelectedItem() != null
                && !txtEmail.getText().isEmpty() && !txtSdt.getText().isEmpty()
                && comboboxCategory.getSelectedItem() != null;
    }

    private void resetForm() {
        txtStudentId.setText("");
        txtName.setText("");
        txtDob.setText("");
        txtAddress.setText("");
        comboboxClass.setSelectedIndex(-1);
        txtEmail.setText("");
        txtSdt.setText("");
        comboboxCategory.setSelectedIndex(-1);
        rbtnBoy.setSelected(false);
        rbtnGirl.setSelected(false);
    }

    private void btnSeachByNameStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeachByNameStudentActionPerformed

    }//GEN-LAST:event_btnSeachByNameStudentActionPerformed

    private void showListSeachStudent(ArrayList<Student> listSearch) {
        int stt = 1;
        tableModel.setRowCount(0);
        for (var e : listSearch) {
            var row = new Object[]{stt++, e.getStudentId(), e.getName(),
                e.getGender(), df.format(e.getDob()), e.getClassRoon(), e.getAddress(),
                e.getMajor(), e.getPhone(), e.getEmail(), e.getPassword()};
            tableModel.addRow(row);
            tableModel.fireTableDataChanged();
        }
    }

    private void showSearchStudent(Student e) {
        int stt = 1;
        tableModel.setRowCount(0);
        var row = new Object[]{stt++, e.getStudentId(), e.getName(),
            e.getGender(), df.format(e.getDob()), e.getClassRoon(), e.getAddress(),
            e.getMajor(), e.getPhone(), e.getEmail(), e.getPassword()};
        tableModel.addRow(row);
        tableModel.fireTableDataChanged();
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        ArrayList<Student> listSearch = new ArrayList<>();
        if (btnSeachByNameStudent.isSelected() || btnSeachByClass.isSelected()
                || btnSeachByStudentId.isSelected()) {
            var search = txtSearch.getText();
            if (!search.isEmpty()) {
                if (btnSeachByClass.isSelected()) {
                    listSearch = dataImplement.searchByClass(listStudent, search);
                    if (listSearch.size() > 0) {
                        showListSeachStudent(listSearch);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "không tìm thấy tên lớp tương ứng!");
                    }
                } else if (btnSeachByStudentId.isSelected()) {
                    Student searchStudent = dataImplement.searchStudentById(listStudent, search);
                    if (searchStudent != null) {
                        showSearchStudent(searchStudent);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "không tìm thấy mã sinh vien tuong ung");
                    }
                } else if (btnSeachByNameStudent.isSelected()) {
                    listSearch = dataImplement.searchByName(listStudent, search);
                    if (listSearch.size() > 0) {
                        showListSeachStudent(listSearch);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "không tìm thấy tên sinh vien tuong ung!");
                    }
                }
                txtSearch.setText("");
                btnSeachByClass.setSelected(false);
                btnSeachByStudentId.setSelected(false);
                btnSeachByNameStudent.setSelected(false);

            } else {
                JOptionPane.showMessageDialog(rootPane, "ô tìm kiếm đang rỗng!");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "vui lòng chọn chức năng tìm kiếm");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (validateForm()) {
            try {
                Date dateNow = new Date();
                Date d = df.parse(txtDob.getText());
                if(d.getTime() < dateNow.getTime()){
                Student s = new Student();
                s.setDob(d);
                s.setStudentId(txtStudentId.getText());
                s.setName(txtName.getText());
                s.setMajor(comboboxCategory.getSelectedItem().toString());
                takeGender(s);
                s.setAddress(txtAddress.getText());
                s.setClassRoon(comboboxClass.getSelectedItem().toString());
                s.setEmail(txtEmail.getText());
                s.setPhone(txtSdt.getText());
                listStudent.add(s);
                Student.ID++;
                dataImplement.insertStudent(s);
                addTableModle(s);
                resetForm();
                JOptionPane.showMessageDialog(rootPane, "Thêm sinh viên thành công");
                }else{
                
                JOptionPane.showMessageDialog(rootPane, "ngày sinh phải nhỏ hơn ngày hiện thời!");
                }

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(rootPane, "vui lòng nhập đúng định dạng (vd: 12/12/2002)!");

            } catch (InValidPhoneException ex) {
                JOptionPane.showMessageDialog(rootPane, "số điện thoại không hợp lệ");
            } catch (InValidEmailException ex) {
                JOptionPane.showMessageDialog(rootPane, "email không hợp lệ");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "vui lòng nhập đầy đủ thông tin");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        edit = tbStudent.getSelectedRow();
        if (listStudent.size() > 0) {
            if (edit != -1) {
                EditStudent editS = new EditStudent(this, true, listStudent.get(edit));
                editS.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(rootPane, "vui lòng chọn sinh viên cần sinh sửa");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "danh sách rỗng");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        edit = tbStudent.getSelectedRow();
        if (listStudent.size() > 0) {
            if (edit != -1) {
                int choic = JOptionPane.showConfirmDialog(rootPane, "bạn có chắc chắn muốn xóa?");
                if (choic == JOptionPane.YES_OPTION) {
                    dataImplement.delStudent(listStudent.get(edit));
                    listStudent.remove(edit);
                    tableModel.removeRow(edit);
                    tableModel.fireTableDataChanged();
                    JOptionPane.showMessageDialog(rootPane, "xóa thành công");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "bạn đã hủy");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "vui lòng chọn sinh viên cần xóa");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "danh sách rỗng");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        showListStudent();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void comboboxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxCategoryActionPerformed
        if (comboboxCategory.getSelectedIndex() == 0) {
            txtStudentId.setText("CT05" + (Student.ID + 1));

        } else if (comboboxCategory.getSelectedIndex() == 1) {
            txtStudentId.setText("AT17" + (Student.ID + 1));

        } else if (comboboxCategory.getSelectedIndex() == 2) {
            txtStudentId.setText("DT04" + (Student.ID + 1));

        }
    }//GEN-LAST:event_comboboxCategoryActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        HomeForm hf = new HomeForm(emp);
        hf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int choic = JOptionPane.showConfirmDialog(rootPane, "bạn có chắc chắn muốn đăng xuất!");
        if (choic == JOptionPane.YES_OPTION) {
            LoginAdminForm laf = new LoginAdminForm();
            laf.setVisible(true);
            this.dispose();

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void showListStudent() {
        tableModel.setRowCount(0);
        int stt = 1;
        for (var e : listStudent) {
            var row = new Object[]{stt++, e.getStudentId(), e.getName(),
                e.getGender(), df.format(e.getDob()), e.getClassRoon(), e.getAddress(),
                e.getMajor(), e.getPhone(), e.getEmail(), e.getPassword()};
            tableModel.addRow(row);
            tableModel.fireTableDataChanged();
        }
    }

    private void addTableModle(Student e) {

        var row = new Object[]{stt++, e.getStudentId(), e.getName(),
            e.getGender(), df.format(e.getDob()), e.getClassRoon(), e.getAddress(),
            e.getMajor(), e.getPhone(), e.getEmail(), e.getPassword()};
        tableModel.addRow(row);
        tableModel.fireTableDataChanged();

    }

    public void editStudent(Student s) {

        listStudent.set(edit, s);
        dataImplement.updateStudent(s);
        tableModel.removeRow(edit);
        var row = new Object[]{edit + 1, s.getStudentId(), s.getName(),
            s.getGender(), df.format(s.getDob()), s.getClassRoon(), s.getAddress(),
            s.getMajor(), s.getPhone(), s.getEmail(), s.getPassword()};
        tableModel.insertRow(edit, row);
        tableModel.fireTableDataChanged();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabeBookName;
    private javax.swing.JLabel LabelBookId;
    private javax.swing.JLabel LabelCategory;
    private javax.swing.JLabel LabelCount;
    private javax.swing.JLabel LabelPrice;
    private javax.swing.JLabel LabelProducer;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JRadioButton btnSeachByClass;
    private javax.swing.JRadioButton btnSeachByNameStudent;
    private javax.swing.JRadioButton btnSeachByStudentId;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.ButtonGroup buttonGroupSearchST;
    private javax.swing.JComboBox<String> comboboxCategory;
    private javax.swing.JComboBox<String> comboboxClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel labelAuthor;
    private javax.swing.JRadioButton rbtnBoy;
    private javax.swing.JRadioButton rbtnGirl;
    private javax.swing.JTable tbStudent;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSdt;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables

    private void addGroup() {
        buttonGroupSearchST.add(btnSeachByClass);
        buttonGroupSearchST.add(btnSeachByNameStudent);
        buttonGroupSearchST.add(btnSeachByStudentId);
        buttonGroupGender.add(rbtnBoy);
        buttonGroupGender.add(rbtnGirl);

    }

    private void setID() {
        int maxID = 0;

        for (var e : listStudent) {
            int id = takeId(e.getStudentId());
            if (maxID < id) {
                maxID = id;
            }
        }
        Student.ID = maxID;

    }

    private int takeId(String studentId) {
        var nameId = studentId.split("(AT17|CT05|DT04)");
        int id = Integer.parseInt(nameId[1]);
        return id;
    }

    private boolean check_gender() {
        if (rbtnBoy.isSelected() || rbtnGirl.isSelected()) {
            return false;

        }
        return true;
    }

    private void takeGender(Student s) {
        if (rbtnBoy.isSelected()) {
            s.setGender("Nam");

        } else {
            s.setGender("Nữ");
        }
    }
}
